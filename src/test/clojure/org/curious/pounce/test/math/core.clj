(ns org.curious.pounce.test.math.core
  (:require [org.curious.pounce.math.core :as math]
            [clojure.test :as test]))

(test/deftest infinite-test
  (test/is (math/is-infinite math/positive-infinity))
  (test/is (math/is-infinite math/negative-infinity))
  (test/is (not (math/is-infinite 0))))
(test/deftest sin-test (test/is (math/eps= (math/sin (/ math/pi 2)) 1)))
(test/deftest cos-test (test/is (math/eps= (math/cos (/ math/pi 2)) 0)))
(test/deftest pow-test (test/is (math/eps= (math/pow 2 3) 8)))
(test/deftest sqrt-test (test/is (math/eps= (math/sqrt 64) 8)))
(test/deftest abs-test
  (test/is (= (math/abs 5) 5))
  (test/is (= (math/abs -5) 5)))
(test/deftest ceil-test
  (test/is (= (math/ceil 10) 10))
  (test/is (= (math/ceil 5/2) 3))
  (test/is (= (math/ceil 5/4) 2)))
(test/deftest floor-test
  (test/is (= (math/floor 10) 10))
  (test/is (= (math/floor 5/2) 2))
  (test/is (= (math/floor 5/4) 1)))
(test/deftest round-test
  (test/is (= (math/round 10) 10))
  (test/is (= (math/round 5/2) 3))
  (test/is (= (math/round 5/4) 1)))
(test/deftest circular-indexer-test (test/is (= ((math/circular-indexer [1 2 3]) 8) 3)))
(test/deftest eps=-test
  (test/is (math/eps= math/positive-infinity math/positive-infinity))
  (test/is (math/eps= math/negative-infinity math/negative-infinity))
  (test/is (not (math/eps= math/positive-infinity math/negative-infinity)))
  (test/is (not (math/eps= math/positive-infinity 0)))
  (test/is (not (math/eps= math/negative-infinity 0)))
  (test/is (math/eps= 0 0))
  (test/is (math/eps= 0 1e-11))
  (test/is (not (math/eps= 0 1e-5)))
  (test/is (math/eps= 0 0 1e-2))
  (test/is (math/eps= 0 0.001 1e-2))
  (test/is (not (math/eps= 0 0.1 1e-2))))
(test/deftest eps<-test
  (test/is (not (math/eps< math/positive-infinity math/positive-infinity)))
  (test/is (not (math/eps< math/negative-infinity math/negative-infinity)))
  (test/is (math/eps< math/negative-infinity math/positive-infinity))
  (test/is (not (math/eps< math/positive-infinity 0)))
  (test/is (math/eps< math/negative-infinity 0))
  (test/is (math/eps< 0 1))
  (test/is (math/eps< (- 1 1e-5) 1))
  (test/is (not (math/eps< (- 1 1e-11) 1))))
(test/deftest eps<=-test
  (test/is (math/eps<= math/positive-infinity math/positive-infinity))
  (test/is (math/eps<= math/negative-infinity math/negative-infinity))
  (test/is (math/eps<= math/negative-infinity math/positive-infinity))
  (test/is (not (math/eps<= math/positive-infinity 0)))
  (test/is (math/eps<= math/negative-infinity 0))
  (test/is (math/eps<= 0 1))
  (test/is (math/eps<= (- 1 1e-5) 1))
  (test/is (math/eps<= (- 1 1e-11) 1))
  (test/is (math/eps<= (+ 1 1e-11) 1))
  (test/is (not (math/eps<= (+ 1 1e-5) 1))))
(test/deftest eps>-test
  (test/is (not (math/eps> math/positive-infinity math/positive-infinity)))
  (test/is (not (math/eps> math/negative-infinity math/negative-infinity)))
  (test/is (math/eps> math/positive-infinity math/negative-infinity))
  (test/is (math/eps> math/positive-infinity 0))
  (test/is (not (math/eps> math/negative-infinity 0)))
  (test/is (math/eps> 1 0))
  (test/is (math/eps> 1 (- 1 1e-5)))
  (test/is (not (math/eps> 1 (- 1 1e-11)))))
(test/deftest eps>=-test
  (test/is (math/eps>= math/positive-infinity math/positive-infinity))
  (test/is (math/eps>= math/negative-infinity math/negative-infinity))
  (test/is (math/eps>= math/positive-infinity math/negative-infinity))
  (test/is (math/eps>= math/positive-infinity 0))
  (test/is (not (math/eps>= math/negative-infinity 0)))
  (test/is (math/eps>= 1 0))
  (test/is (math/eps>= 1 (- 1 1e-5)))
  (test/is (math/eps>= 1 (- 1 1e-11)))
  (test/is (math/eps>= 1 (+ 1 1e-11)))
  (test/is (not (math/eps>= 1 (+ 1 1e-5)))))
(test/deftest map-eps=-test
  (test/is (math/map-eps= {1 2 3 4 5 'six} {1 2 3 4 5 'six}))
  (test/is (math/map-eps= {1 2 3 (+ 4 1e-11) 5 'six} {1 2 3 4 5 'six}))
  (test/is (math/map-eps= {1 2 3 {1 2 3 (+ 4 1e-11) 5 'six} 5 'six} {1 2 3 {1 2 3 4 5 'six} 5 'six}))
  (test/is (not (math/map-eps= {1 2 3 (+ 4 1e-9) 5 'six} {1 2 3 4 5 'six})))
  (test/is (not (math/map-eps= {1 2 3 {1 2 3 (+ 4 1e-9)} 5 'six} {1 2 3 {1 2 3 4} 5 'six}))))
